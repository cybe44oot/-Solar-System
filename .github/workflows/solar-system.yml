name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

jobs:
  unit-testing:
    name: Unit Testing
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    env:
      MONGO_URI: ${{ secrets.MONGO_URI }}
      MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    strategy:
      matrix:
        node-version: [19, 20]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm install

      - name: Unit Testing
        run: npm test

      - name: Archive Test Result
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result-${{ matrix.node-version }}-${{ matrix.os }}
          path: test-results.xml
            
  code_coverage:
    name: Code Coverage
    container: 
      image: node:18
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options: 
          --name mongo
    env:
      MONGO_URI: mongodb://mongo:27017/superData
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache NPM Dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('/package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Code Coverage
        run: npm run coverage

      - name: Archive Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: Coverage-Report-${{ matrix.node-version }}-${{ matrix.os }}
          path: coverage
          retention-days: 5

  docker:
    name: containerization
    needs: [unit-testing, code_coverage]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: docker login 
        uses: docker/login-action@v2
        with: 
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: docker build for test
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKER_USERNAME }}/github-actions-solar-system:${{ github.sha }}

      - name: docker test
        run: |
          docker images 
          docker run --name solar-system-test -d -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKER_USERNAME }}/github-actions-solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-test)
          echo "Container IP Address: $IP"

          echo "Waiting for app to be ready..."
          for i in {1..15}; do
            if curl -fsS http://localhost:3000/live > /dev/null; then
              echo "✅ App is up!"
              break
            fi
            echo "Not up yet, retrying in 5s ($i/15)..."
            sleep 5
          done

          if ! curl -fsS http://localhost:3000/live > /dev/null; then
            echo "❌ App did not start in time" >&2
            docker logs solar-system-test
            exit 1
          fi

          echo "Container test passed!"
          docker logs solar-system-test | tail -n 50

      - name: docker push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/github-actions-solar-system:${{ github.sha }}

      - name: ghcr login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: container registry push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKER_USERNAME }}/github-actions-solar-system:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/github-actions-solar-system:${{ github.sha }}
  dev-deploy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: install kubctl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: setup kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
      
      - name: fetch k8s cluster details 
        run: |
          kubectl version  
          echo ------------------------------------
          kubectl get pods




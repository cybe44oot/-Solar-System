name: Solar Systems Workflow
on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
env:
  MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}

jobs:
  unit-testing:
    services:
      mongo-db:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: non-prod-user
          MONGO_INITDB_ROOT_PASSWORD: non-prod-password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
      #MONGO_URI: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@localhost:27017/solar_system?authSource=admin
    strategy:
      matrix:
        nodejs_version: [18, 20]
        operating_system: [ubuntu-latest]
        exclude:
          - nodejs_version: 18
            operating_system: macos-latest

    name: Unit Testing
    runs-on: ${{matrix.operating_system}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
      
      - name: Set dynamic MONGO_URI
        run: echo "MONGO_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@localhost:27017/solar_system?authSource=admin" >> $GITHUB_ENV
      
      - name: Setup NodeJS Version - ${{matrix.nodejs_version}}
        uses: actions/setup-node@v5
        with: 
          node-version: ${{matrix.nodejs_version}}

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}}

  
      - name: Install all Dependencies
        run: npm install

      - name: Seed database
        run: npm run seed
      
      - name: Unit Testing
        id: nodejs-unit-testing-step
        run: npm test 
      - name: Archive Test Result
        if : always()
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result-${{ github.job }}-${{ matrix.nodejs_version }}-${{ matrix.operating_system }}-${{ github.run_number }}
          path: test-results.xml
  
  code-coverage:

    name: Code Coverage
    runs-on: ubuntu-latest
    container:
      image: node:18
    services:
       mongo-db:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: non-prod-user
          MONGO_INITDB_ROOT_PASSWORD: non-prod-password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
    steps:
      - name: checkout Repository
        uses: actions/checkout@v5
      
      # - name: Setup NodeJs Version - 18
      #   uses: actions/setup-node@v5
      #   with:
      #     node-version: 18

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}}
      - name: Set dynamic MONGO_URI
        run: echo "MONGO_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@localhost:27017/solar_system?authSource=admin" >> $GITHUB_ENV

      - name: Install Dependencies
        run: npm install 

      - name: Check Code Coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive Test Result
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5
  
  docker:
    name: containerization
    runs-on: ubuntu-latest
    needs: [unit-testing, code-coverage]
    permissions: 
      packages: write
    steps:
      - name: Code Checkout
        uses: actions/checkout@v5
      
      - name: Dockerhub Login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: GHCR Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.repository_owner}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Docker build for testing
        uses: docker/build-push-action@v6
        with:
          push: false
          context: .
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{github.sha}}
      # - name: Docker Image Test
      #   run: |
      #     docker images
      #     docker run --name solar-system-app -d \
      #     -p 3000:3000 \
      #     -e MONGO_URI=$MONGO_URI \
      #     -e MONGO_USERNAME=$MONGO_USERNAME \
      #     -e MONGO_PASSWORD=$MONGO_PASSWORD \
      #     ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
  
      #     # export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
      #     # echo "Adresse IP du conteneur : $IP"
      #     echo Test URL using wget
      #     wget -q -O - 127.0.0.1:3000/live | grep live
    
      - name: Normalize repo owner
        id: vars
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      
      - name: Container Registry Push for Git Hub
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}
            ghcr.io/${{steps.vars.outputs.owner}}/solar-system:${{ github.sha }}
  
  dev-deploy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: checkout Repo
        uses: actions/checkout@v5

      - name: Install kind CLI
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      # - name:  Create cluster using KinD
      #   uses:  kubernetes-sigs/kind@v0.20.0
      #   with:
      #     version: v0.20.0
      

      - name: Install kubectl CLI
        uses: azure/setup-kubectl@v4

      - name: Create KinD cluster
        run: kind create cluster --name test-cluster

      - name: Set kubeconfig
        run: export KUBECONFIG="$(kind get kubeconfig-path --name="test-cluster")"
      
      # - name: Set Kubeconfig file
      #   uses: azure/k8s-set-context@v4
      #   with:
      #     method: kubeconfig
      #     kubeconfig: ${{secrets.KUBE_CONFIG}}
      
      - name: Fetch Kubernetes CLuster Details
        run: |
          echo "Client Version:"
          kubectl version --client
          echo "Server Version:"
          kubectl version
          echo "Nodes"
          kubectl get nodes

      # - name: Replace Token in Manifest files
      #   uses:  cschleiden/replace-tokens@v1
      #   with:
      #     tokenPrefix: '_{_'
      #     tokenSuffix: '_}_'
      #     files: '["solar-system-repo/kubernetes/development/*.yaml"]'
      #   env:
      #     NAMESPACE: ${{vars.NAMESPACE}}
      #     REPLICAS: ${{vars.REPLICAS}}
      #     IMAGE: ${{vars.DOCKERHUB_USERNAME}}/solar-systems:${{github.sha}}
     





